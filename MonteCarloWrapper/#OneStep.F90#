Module OneStepModule
      Use MCCPublic
      Implicit none
      ! This section defines the particles.
                  Integer(4),parameter :: NSpecyMax=2_4
                  !Type(ParticleBundle),private ::  ParticleGlobal(0:NSpecyMax)
                  Integer(4),save :: NSpecy=2_4
                  Type(Gas),save ::  GasGlobal
                  Type(MCCBundle),save,private ::  MCCBundleGlobal(0:NSpecyMax)
                  !Type(ParticleBundleSmall),save,private ::  MCCBefore(0:NSpecyMax),MCCAfter(0:NSpecyMax)
                  Type(OneSpecy),save :: SPGlobal(0:NSpecyMax)
                  
                  !Real(8) :: CollisionRatio(0:NSpecyMax)
      !  This section defines the MCC and gas properties.
           
    contains
    Subroutine MCCInitilalization(dt,InputNSpecy,CollisionRatio)
             Use GasModule
             Use MCCPublic
             Use ArGasModule
             Use ISO_C_BINDING
             Implicit none
             !Integer(4),intent(in) ::  InputNSpecy
             !Real(8),intent(in):: dt
             !Real(8),intent(out):: CollisionRatio(0:InputNSpecy)
             
             Integer(C_int),intent(in) ::  InputNSpecy
             Real(C_DOUBLE),intent(in):: dt
             Real(C_DOUBLE),intent(out):: CollisionRatio(0:InputNSpecy)
             Integer(4) ::  i
             
             Call ArSigmaInitialization()
             Call GasInit(NSpecyMax,SPGlobal,GasGlobal)
             NSpecy=InputNSpecy 
             Call MCCBundleInit(GasGlobal,NSpecy,SPGlobal,ArReaction,ArSigma,MCCBundleGlobal,dt)  
             do i=0,NSpecy
                    CollisionRatio(i)=MCCBundleGlobal(i)%CollisionRatio
             end do
        return  
    End Subroutine MCCInitilalization
    
    Subroutine MCC(NParMax,NParticle,MCCBefore)
        Implicit none
        ! j is the Particle Index;
        Integer(C_int),intent(in) :: NParMax
        Integer(C_int),intent(inout) :: NParticle
        Type(ParticleOne),intent(inout) :: MCCBefore(NParMax)
        Type(ParticleOne) :: MCCAfter(NParMax)
        Integer(4) :: NParAfter,NTP
        Type(ParticleOne) :: TempParticle(3)
        Type(MCCParticleOne) :: TempMCCParticle
        Integer(4) :: i,j,SP,Index
        
        !Type(Gas),intent(in) :: InputGas
        !Type(MCCBundle),intent(in) :: InputMCCBundle
        NParAfter=0
               do i=1,NParticle
                       SP=MCCBefore(i)%SP
                       MCCBefore(i)%Vx=MCCBefore(i)%Vx*MCCBundleGlobal(SP)%VFactor
                       MCCBefore(i)%Vy=MCCBefore(i)%Vy*MCCBundleGlobal(SP)%VFactor
                       MCCBefore(i)%Vz=MCCBefore(i)%Vz*MCCBundleGlobal(SP)%VFactor
                       select case (MCCBundleGlobal(SP)%Model)
                         Case(0_4)
                             Call UpdateParticleMCCElectron(MCCBefore(i),TempMCCParticle,MCCBundleGlobal(SP)%Mass)
                             Call SelectProbility(TempMCCParticle,MCCBundleGlobal(SP))
                             Index=TempMCCParticle%Index
                             Call  SelectCollisionElectron(TempMCCParticle,GasGlobal,MCCBundleGlobal(SP)%Reaction(Index),NTP,TempParticle)
                         Case(1_4)
                              Call UpdateParticleMCCIon(MCCBefore(i),TempMCCParticle,MCCBundleGlobal(SP)%Mass,GasGlobal) 
                              Call SelectProbility(TempMCCParticle,MCCBundleGlobal(SP))
                              Index=TempMCCParticle%Index
                              Call  SelectCollisionIon(TempMCCParticle,GasGlobal,MCCBundleGlobal(SP)%Reaction(Index),NTP,TempParticle)
                         end select
                         do j=1,NTP
                             NParAfter=NParAfter+1
                             TempParticle(j)%Vx=TempParticle(j)%Vx/MCCBundleGlobal(TempParticle(j)%sp)%VFactor
                             TempParticle(j)%Vy=TempParticle(j)%Vy/MCCBundleGlobal(TempParticle(j)%sp)%VFactor
                             TempParticle(j)%Vz=TempParticle(j)%Vz/MCCBundleGlobal(TempParticle(j)%sp)%VFactor
                             MCCAfter(NParAfter)=TempParticle(j)
                        end do
               End do
               Do i=1,NParAfter
                     MCCBefore(i)=MCCAfter(i)
               End do
               NParticle=NParAfter
              return
     End  Subroutine MCC
End Module OneStepModule
